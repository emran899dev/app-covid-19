{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","latest","setLatest","results","setResult","searchCountries","setSearchCountries","useEffect","axios","all","get","then","responseArr","data","catch","err","console","log","cases","deaths","recovered","updated","lastUpdate","Date","parseInt","toString","countries","filter","item","country","includes","map","id","population","tests","todayCases","todayDeaths","todayRecovered","active","critical","Card","key","bg","text","className","style","margin","Body","Title","Img","variant","src","countryInfo","flag","Text","backgroundColor","padding","color","border","CardDeck","Footer","Form","Group","controlId","Control","type","placeholder","onChange","e","target","value","queries","columns","query","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.83f29771.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Card from 'react-bootstrap/Card'\nimport CardDeck from 'react-bootstrap/CardDeck'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from 'axios'\nimport Columns from 'react-columns'\nimport Form from 'react-bootstrap/Form'\n\nfunction App() {\n  const [latest, setLatest] = useState([])\n  const [results, setResult] = useState([])\n  const [searchCountries, setSearchCountries] = useState(\"\")\n\n  useEffect(() => {\n    axios\n      .all([\n        axios.get(\"https://corona.lmao.ninja/v2/all\"),\n        axios.get(\"https://corona.lmao.ninja/v2/countries?sort=country\"),\n      ])\n      .then(responseArr => {\n        setLatest(responseArr[0].data)\n        // console.log(responseArr[0].data);\n        setResult(responseArr[1].data)\n        // console.log(responseArr[1].data);\n      })\n      .catch(err => {\n        console.log(err)\n      })\n  }, [])\n\n  const { cases, deaths, recovered, updated } = latest\n\n  // time parseInt\n  const date = new Date(parseInt(updated))\n  const lastUpdate = date.toString()\n\n// Search Country\n  const filterCountries = results.filter(item => {\n    return searchCountries !== \"\" ? item.country.includes(searchCountries) : item\n  })\n\n  // show all country\n  const countries = filterCountries.map((data, id) => {\n    const { country, population, tests, cases, todayCases, deaths, todayDeaths, recovered, todayRecovered, active, critical } = data\n    return (\n      <Card\n        key={id}\n        bg=\"light\"\n        text=\"dark\"\n        className=\"text-center\"\n        style={{ margin: \"10px\" }}\n      >\n        <Card.Body>\n          <Card.Title>Country: {country}</Card.Title>\n          <Card.Img variant=\"top\" src={data.countryInfo.flag} />\n\n          <br />\n          <br />\n          <Card.Text>Population ({population})</Card.Text>\n          <Card.Text>Tests ({tests})</Card.Text>\n          <Card.Text>Case ({cases})</Card.Text>\n          <Card.Text>Deaths ({deaths})</Card.Text>\n         <Card.Text>Recovered ({recovered})</Card.Text>\n          \n        </Card.Body>\n      </Card>\n    )\n  })\n\n  var queries = [{\n    columns: 2,\n    query: 'min-width: 500px'\n  }, {\n    columns: 3,\n    query: 'min-width: 1000px'\n  }];\n\n  // header card\n  return (\n    <div>\n        <br />\n        <h2 className=\"text-center\" style={{backgroundColor:\"#4d00b2\", padding:\"10px\", color:\"white\",border:\"1px solid gray\",}}>Covid-19 Live Stats Application</h2>\n        <br />\n      <CardDeck>\n        <Card bg=\"secondary\" text={\"white\"} className=\"text-center\" style={{ margin: \"10px\" }}>\n          <Card.Body>\n            <Card.Title>Case</Card.Title>\n            <Card.Text>{cases}</Card.Text>\n          </Card.Body>\n          <Card.Footer>\n            <small>Last Updated {lastUpdate}</small>\n          </Card.Footer>\n        </Card>\n        <Card bg=\"danger\" text={\"white\"} className=\"text-center\" style={{ margin: \"10px\" }}>\n          <Card.Body>\n            <Card.Title>Deaths</Card.Title>\n            <Card.Text>{deaths}</Card.Text>\n          </Card.Body>\n          <Card.Footer>\n            <small>Last Updated {lastUpdate}</small>\n          </Card.Footer>\n        </Card>\n        <Card bg=\"success\" text={\"white\"} className=\"text-center\" style={{ margin: \"10px\" }}>\n          <Card.Body>\n            <Card.Title>Recovered</Card.Title>\n            <Card.Text>{recovered}</Card.Text>\n          </Card.Body>\n          <Card.Footer>\n            <small>Last Updated {lastUpdate}</small>\n          </Card.Footer>\n        </Card>\n      </CardDeck>\n      <br />\n      {/* search form */}\n      <Form>\n        <Card.Title style={{backgroundColor:\"#ff82d1\", padding:\"10px\", color:\"white\",border:\"1px solid gray\",}}className=\"text-center\"> Search Your Country</Card.Title>\n        <Form.Group controlId=\"formGroupSearch\">\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Search Country\"\n            onChange={e => setSearchCountries(e.target.value)}\n          />\n        </Form.Group>\n\n      </Form>\n\n      {/* all country card show */}\n      <Columns queries={queries}>{countries}</Columns>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}